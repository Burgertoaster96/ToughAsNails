plugins {
    id "net.minecraftforge.gradle" version "6.0.+"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.minecraftforge.gradleutils' version '2.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

ext {
    mod_version = gradleutils.getTagOffsetVersion()
    changelog_file = project.file("build/changelog.txt")
}

changelog {
    fromTag '9.2.0'
}

def trimChangelog(String text) {
    def m = text =~ /(?s) - (?:[0-9.]+) (.+?)(?=( - )|$)/
    return '```\n' + m[0][1].replaceAll(/(?m)^ */, '')
}

group = "com.github.glitchfiend"
base.archivesName = mod_name
version = "${minecraft_version}-${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release.set(17)
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client = {
            workingDirectory = project.file("run")
            args "-mixin.config=${mod_id}.mixins.json"
            ideaModule "${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}.mixins.json"
            ideaModule "${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            ideaModule "${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), "-mixin.config=${mod_id}.mixins.json"
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
            srcDirs main.java.srcDirs
            include "${mod_id}/api/**"
        }
    }
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version
    implementation fg.deobf("com.github.glitchfiend:SereneSeasons:${serene_seasons_version}")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

task apiJar(type: Jar) {
    from sourceSets.api.allJava, sourceSets.api.output
    archiveClassifier = 'api'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier = 'deobf'
}

build.dependsOn apiJar
build.dependsOn deobfJar

curseforge {
    apiKey = project.findProperty('curseApiKey') ?: 'unset'
    project {
        id = mod_curseforge_id

        if (changelog_file.exists()) {
            changelog = changelog_file
        }

        releaseType = 'beta'
        addGameVersion minecraft_version

        mainArtifact(jar) {
            displayName = "${mod_display_name} ${version}"
        }

        addArtifact deobfJar
        addArtifact apiJar
    }
}

modrinth {
    token = project.findProperty('modrinthToken')
    projectId = mod_modrinth_id
    versionNumber = mod_version
    versionName = version + " for Forge " + minecraft_version
    versionType = 'beta' // can be release, beta, or alpha
    uploadFile = jar
    gameVersions = [minecraft_version]
    loaders = ['forge']

    if (changelog_file.exists()) {
        changelog = trimChangelog(changelog_file.text)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // We must use artifact jar to ensure the Forge dependency is excluded from the pom, breaking fg.deobf()
            artifact jar
            artifact apiJar
            artifact deobfJar
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            pom {
                name = project.mod_name
                description = project.mod_description
                url = project.mod_git_url
                scm {
                    url = project.mod_git_url
                    connection = project.mod_scm_url
                    developerConnection = project.mod_scm_url
                }
                issueManagement {
                    system = 'github'
                    url = project.mod_issues_url
                }
                licenses {
                    license {
                        name = 'All Rights Reserved'
                    }
                }
                developers {
                    developer {
                        id = 'adubbz'
                        name = 'Adubbz'
                    }
                    developer {
                        id = 'forstride'
                        name = 'Forstride'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://maven.minecraftforge.net/releases/"
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}
